Обо мне
Я обладаю базовыми знаниями в области программирования на Python, включая объектно-ориентированное программирование (ООП) и проектирование программного обеспечения. Я изучил и применил несколько ключевых принципов и паттернов проектирования, которые помогают создавать более структурированные и поддерживаемые приложения. Вот некоторые из них:

Принципы SOLID:

SRP (Single Responsibility Principle): Я научился разделять обязанности классов, чтобы каждый класс отвечал за одну задачу, что упрощает поддержку и расширение кода.
OCP (Open-Closed Principle): Я понимаю, как проектировать классы так, чтобы они были открыты для расширения, но закрыты для модификации, что позволяет добавлять новый функционал без изменения существующего кода.
LSP (Liskov Substitution Principle): Я осознал важность обеспечения совместимости подклассов с базовыми классами, что позволяет использовать полиморфизм без риска возникновения ошибок.
ISP (Interface Segregation Principle): Я научился создавать более узкие и специализированные интерфейсы, чтобы клиенты использовали только те методы, которые им нужны.
DIP (Dependency Inversion Principle): Я применяю абстракции для уменьшения жестких зависимостей между модулями, что делает систему более гибкой.
Паттерны проектирования:

Command Pattern: Я реализовал паттерн "Команда" для управления действиями в приложении, что позволяет отделить запросы от их выполнения.
Builder Pattern: Я изучил, как использовать паттерн "Строитель" для создания сложных объектов поэтапно, что улучшает читаемость и структуру кода.
Prototype Pattern: Я понял, как создавать новые объекты на основе существующих, используя клонирование, что упрощает создание объектов с похожими характеристиками.
Работа с потоками:

Я освоил основы многопоточного программирования, включая создание и управление потоками, синхронизацию с использованием событий и блокировок, что позволяет эффективно использовать ресурсы и улучшать производительность приложений.
Структуры данных:

Я изучил различные структуры данных, такие как списки, кортежи, множества и словари, и их применение в Python. Я также применял их для решения задач, таких как поиск, сортировка и хранение данных.
Модульное тестирование:

Я освоил использование библиотеки unittest для написания тестов, что позволяет мне проверять корректность работы функций и методов, а также улучшает качество кода.
Работа с файлами:

Я научился читать и записывать данные в файлы, а также использовать сериализацию и десериализацию с помощью библиотеки pickle, что позволяет сохранять и загружать объекты Python.
MVC (Model-View-Controller):

Я реализовал паттерн проектирования MVC, который разделяет бизнес-логику, пользовательский интерфейс и управление данными, что улучшает структуру приложения и облегчает его поддержку.
Эти знания и навыки позволяют мне разрабатывать более качественные и поддерживаемые приложения на Python. Я стремлюсь продолжать изучение и применение новых технологий и паттернов, чтобы улучшать свои навыки в программировании и проектировании программного обеспечения.